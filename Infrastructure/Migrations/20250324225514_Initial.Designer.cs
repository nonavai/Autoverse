// <auto-generated />
using System;
using Infrastructure.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(AutoVerseContext))]
    [Migration("20250324225514_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("public")
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.CarConfiguration", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("BodyType")
                        .HasColumnType("integer");

                    b.Property<string>("ConfigurationName")
                        .HasColumnType("text");

                    b.Property<int>("DoorsCount")
                        .HasColumnType("integer");

                    b.Property<string>("GenerationId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("GenerationId");

                    b.ToTable("CarConfigurations", "public");
                });

            modelBuilder.Entity("Domain.Entities.Comfort", b =>
                {
                    b.Property<string>("ModificationId")
                        .HasColumnType("text");

                    b.Property<bool>("AUX")
                        .HasColumnType("boolean");

                    b.Property<bool>("AndroidAuto")
                        .HasColumnType("boolean");

                    b.Property<bool>("AppleCarplay")
                        .HasColumnType("boolean");

                    b.Property<bool>("AshtrayAndCigaretteLighter")
                        .HasColumnType("boolean");

                    b.Property<bool>("AudioPreparation")
                        .HasColumnType("boolean");

                    b.Property<bool>("AutoCruise")
                        .HasColumnType("boolean");

                    b.Property<bool>("AutoMirrors")
                        .HasColumnType("boolean");

                    b.Property<bool>("AutoPark")
                        .HasColumnType("boolean");

                    b.Property<bool>("Bluetooth")
                        .HasColumnType("boolean");

                    b.Property<bool>("Camera360")
                        .HasColumnType("boolean");

                    b.Property<bool>("CdAudioSystem")
                        .HasColumnType("boolean");

                    b.Property<int>("ClimateControl")
                        .HasColumnType("integer");

                    b.Property<bool>("Computer")
                        .HasColumnType("boolean");

                    b.Property<bool>("Condition")
                        .HasColumnType("boolean");

                    b.Property<bool>("CoolingBox")
                        .HasColumnType("boolean");

                    b.Property<bool>("CruiseControl")
                        .HasColumnType("boolean");

                    b.Property<bool>("DriveModeSystem")
                        .HasColumnType("boolean");

                    b.Property<bool>("DriverSeatSupport")
                        .HasColumnType("boolean");

                    b.Property<bool>("EasyTrunkOpening")
                        .HasColumnType("boolean");

                    b.Property<bool>("ElectroMirrors")
                        .HasColumnType("boolean");

                    b.Property<bool>("ElectroRegulatingSeat")
                        .HasColumnType("boolean");

                    b.Property<bool>("ElectroTrunk")
                        .HasColumnType("boolean");

                    b.Property<bool>("ElectroWindowBack")
                        .HasColumnType("boolean");

                    b.Property<bool>("ElectroWindowFront")
                        .HasColumnType("boolean");

                    b.Property<bool>("ElectronicGagePanel")
                        .HasColumnType("boolean");

                    b.Property<bool>("FrontCamera")
                        .HasColumnType("boolean");

                    b.Property<bool>("HeatedSteeringWheel")
                        .HasColumnType("boolean");

                    b.Property<bool>("KeylessEntry")
                        .HasColumnType("boolean");

                    b.Property<bool>("MassageSeats")
                        .HasColumnType("boolean");

                    b.Property<bool>("MultiFunctionSteeringWheel")
                        .HasColumnType("boolean");

                    b.Property<bool>("Multimedia")
                        .HasColumnType("boolean");

                    b.Property<bool>("Navigation")
                        .HasColumnType("boolean");

                    b.Property<bool>("ParkAssistFront")
                        .HasColumnType("boolean");

                    b.Property<bool>("ParkAssistRear")
                        .HasColumnType("boolean");

                    b.Property<bool>("PowerLatchingDoors")
                        .HasColumnType("boolean");

                    b.Property<bool>("PremiumAudio")
                        .HasColumnType("boolean");

                    b.Property<bool>("ProgrammedBlockHeater")
                        .HasColumnType("boolean");

                    b.Property<bool>("ProjectionDisplay")
                        .HasColumnType("boolean");

                    b.Property<bool>("RearCamera")
                        .HasColumnType("boolean");

                    b.Property<bool>("RemoteEngineStart")
                        .HasColumnType("boolean");

                    b.Property<bool>("SeatSupport")
                        .HasColumnType("boolean");

                    b.Property<bool>("SeatUpDown")
                        .HasColumnType("boolean");

                    b.Property<bool>("SeatsHeat")
                        .HasColumnType("boolean");

                    b.Property<bool>("SeatsHeatVent")
                        .HasColumnType("boolean");

                    b.Property<bool>("Servo")
                        .HasColumnType("boolean");

                    b.Property<bool>("Socket12V")
                        .HasColumnType("boolean");

                    b.Property<bool>("Socket220V")
                        .HasColumnType("boolean");

                    b.Property<bool>("StartButton")
                        .HasColumnType("boolean");

                    b.Property<bool>("StartStopFunction")
                        .HasColumnType("boolean");

                    b.Property<bool>("SteeringWheelGearShiftPaddles")
                        .HasColumnType("boolean");

                    b.Property<bool>("TVAudioSystem")
                        .HasColumnType("boolean");

                    b.Property<bool>("USB")
                        .HasColumnType("boolean");

                    b.Property<bool>("VoiceRecognition")
                        .HasColumnType("boolean");

                    b.Property<string>("WheelDistanceConfiguration")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("WheelHightConfiguration")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("WheelMemory")
                        .HasColumnType("boolean");

                    b.Property<bool>("WheelPower")
                        .HasColumnType("boolean");

                    b.Property<bool>("WirelessCharger")
                        .HasColumnType("boolean");

                    b.Property<bool>("YaAuto")
                        .HasColumnType("boolean");

                    b.HasKey("ModificationId");

                    b.ToTable("Comforts", "public");
                });

            modelBuilder.Entity("Domain.Entities.Dimension", b =>
                {
                    b.Property<string>("ModificationId")
                        .HasColumnType("text");

                    b.Property<float?>("BackWheelBase")
                        .HasColumnType("real");

                    b.Property<string>("Clearance")
                        .HasColumnType("text");

                    b.Property<float?>("FrontWheelBase")
                        .HasColumnType("real");

                    b.Property<float>("Height")
                        .HasColumnType("real");

                    b.Property<float>("Length")
                        .HasColumnType("real");

                    b.Property<float>("WheelBase")
                        .HasColumnType("real");

                    b.Property<string>("WheelSize")
                        .HasColumnType("text");

                    b.Property<float>("Width")
                        .HasColumnType("real");

                    b.HasKey("ModificationId");

                    b.ToTable("Dimensions", "public");
                });

            modelBuilder.Entity("Domain.Entities.Emissions", b =>
                {
                    b.Property<string>("ModificationId")
                        .HasColumnType("text");

                    b.Property<float?>("ChargeTime")
                        .HasColumnType("real");

                    b.Property<int?>("ElectricRange")
                        .HasColumnType("integer");

                    b.Property<string>("EmissionEuroClass")
                        .HasColumnType("text");

                    b.Property<int?>("FuelEmission")
                        .HasColumnType("integer");

                    b.HasKey("ModificationId");

                    b.ToTable("Emissions", "public");
                });

            modelBuilder.Entity("Domain.Entities.Engine", b =>
                {
                    b.Property<string>("ModificationId")
                        .HasColumnType("text");

                    b.Property<float?>("Compression")
                        .HasColumnType("real");

                    b.Property<string>("CylindersOrder")
                        .HasColumnType("text");

                    b.Property<int?>("CylindersValue")
                        .HasColumnType("integer");

                    b.Property<float?>("Diametr")
                        .HasColumnType("real");

                    b.Property<string>("EngineFeeding")
                        .HasColumnType("text");

                    b.Property<string>("EngineOrder")
                        .HasColumnType("text");

                    b.Property<int>("EngineType")
                        .HasColumnType("integer");

                    b.Property<int?>("GearValue")
                        .HasColumnType("integer");

                    b.Property<float>("HorsePower")
                        .HasColumnType("real");

                    b.Property<float>("KvtPower")
                        .HasColumnType("real");

                    b.Property<int?>("Moment")
                        .HasColumnType("integer");

                    b.Property<string>("MomentRpm")
                        .HasColumnType("text");

                    b.Property<string>("PetrolType")
                        .HasColumnType("text");

                    b.Property<float?>("PistonStroke")
                        .HasColumnType("real");

                    b.Property<string>("RpmPower")
                        .HasColumnType("text");

                    b.Property<int?>("Valves")
                        .HasColumnType("integer");

                    b.Property<float?>("Volume")
                        .HasColumnType("real");

                    b.Property<float?>("VolumeLitres")
                        .HasColumnType("real");

                    b.HasKey("ModificationId");

                    b.ToTable("Engines", "public");
                });

            modelBuilder.Entity("Domain.Entities.Exterior", b =>
                {
                    b.Property<string>("ModificationId")
                        .HasColumnType("text");

                    b.Property<bool>("AdaptiveLight")
                        .HasColumnType("boolean");

                    b.Property<bool>("AutomaticLightingControl")
                        .HasColumnType("boolean");

                    b.Property<bool>("BodyKit")
                        .HasColumnType("boolean");

                    b.Property<bool>("DaytimeRunningLights")
                        .HasColumnType("boolean");

                    b.Property<bool>("DoorSillPanel")
                        .HasColumnType("boolean");

                    b.Property<bool>("DoubleColoredBody")
                        .HasColumnType("boolean");

                    b.Property<bool>("FrontFogLights")
                        .HasColumnType("boolean");

                    b.Property<bool>("HeatedMirrors")
                        .HasColumnType("boolean");

                    b.Property<bool>("HeatedWashSystem")
                        .HasColumnType("boolean");

                    b.Property<bool>("HeatedWindscreen")
                        .HasColumnType("boolean");

                    b.Property<bool>("HeatedWindshieldCleaner")
                        .HasColumnType("boolean");

                    b.Property<bool>("HighBeamAssist")
                        .HasColumnType("boolean");

                    b.Property<bool>("LEDLights")
                        .HasColumnType("boolean");

                    b.Property<bool>("LaserLights")
                        .HasColumnType("boolean");

                    b.Property<bool>("LightCleaner")
                        .HasColumnType("boolean");

                    b.Property<bool>("LightSensor")
                        .HasColumnType("boolean");

                    b.Property<bool>("MetallicColored")
                        .HasColumnType("boolean");

                    b.Property<bool>("Mouldings")
                        .HasColumnType("boolean");

                    b.Property<bool>("RainSensor")
                        .HasColumnType("boolean");

                    b.Property<bool>("RoofRails")
                        .HasColumnType("boolean");

                    b.Property<bool>("SteelWheels")
                        .HasColumnType("boolean");

                    b.Property<bool>("XenonLights")
                        .HasColumnType("boolean");

                    b.HasKey("ModificationId");

                    b.ToTable("Exteriors", "public");
                });

            modelBuilder.Entity("Domain.Entities.Generation", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<bool>("IsRestyle")
                        .HasColumnType("boolean");

                    b.Property<string>("ModelId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("YearStart")
                        .HasColumnType("integer");

                    b.Property<int>("YearStop")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ModelId");

                    b.ToTable("Generations", "public");
                });

            modelBuilder.Entity("Domain.Entities.Interior", b =>
                {
                    b.Property<string>("ModificationId")
                        .HasColumnType("text");

                    b.Property<bool>("AdjustablePedals")
                        .HasColumnType("boolean");

                    b.Property<bool>("BlackRoof")
                        .HasColumnType("boolean");

                    b.Property<bool>("DecorativeInteriorLighting")
                        .HasColumnType("boolean");

                    b.Property<bool>("FoldingFrontPassengerSeat")
                        .HasColumnType("boolean");

                    b.Property<bool>("FoldingTablesRear")
                        .HasColumnType("boolean");

                    b.Property<bool>("FrontCentreArmrest")
                        .HasColumnType("boolean");

                    b.Property<bool>("Hatch")
                        .HasColumnType("boolean");

                    b.Property<int>("InteriorMaterial")
                        .HasColumnType("integer");

                    b.Property<bool>("LeatherGearStick")
                        .HasColumnType("boolean");

                    b.Property<bool>("LeatherSteeringWheel")
                        .HasColumnType("boolean");

                    b.Property<bool>("PanoramaRoof")
                        .HasColumnType("boolean");

                    b.Property<bool>("RollerBlindForRearWindow")
                        .HasColumnType("boolean");

                    b.Property<bool>("RollerBlindsForRearSideWindows")
                        .HasColumnType("boolean");

                    b.Property<bool>("SeatMemory")
                        .HasColumnType("boolean");

                    b.Property<bool>("SeatTransformation")
                        .HasColumnType("boolean");

                    b.Property<string>("Seats")
                        .HasColumnType("text");

                    b.Property<bool>("SportPedals")
                        .HasColumnType("boolean");

                    b.Property<bool>("SportSeats")
                        .HasColumnType("boolean");

                    b.Property<bool>("ThirdRearHeadrest")
                        .HasColumnType("boolean");

                    b.Property<bool>("ThirdRowSeats")
                        .HasColumnType("boolean");

                    b.Property<bool>("TintedGlass")
                        .HasColumnType("boolean");

                    b.Property<int?>("TrunksMaxCapacity")
                        .HasColumnType("integer");

                    b.Property<int?>("TrunksMinCapacity")
                        .HasColumnType("integer");

                    b.HasKey("ModificationId");

                    b.ToTable("Interiors", "public");
                });

            modelBuilder.Entity("Domain.Entities.Mark", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("Country")
                        .HasColumnType("integer");

                    b.Property<string>("CyrillicName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Popular")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Marks", "public");
                });

            modelBuilder.Entity("Domain.Entities.Mobility", b =>
                {
                    b.Property<string>("ModificationId")
                        .HasColumnType("text");

                    b.Property<bool>("ActiveSuspension")
                        .HasColumnType("boolean");

                    b.Property<bool>("AirSuspension")
                        .HasColumnType("boolean");

                    b.Property<string>("BackBrake")
                        .HasColumnType("text");

                    b.Property<string>("BackSuspension")
                        .HasColumnType("text");

                    b.Property<int>("Drive")
                        .HasColumnType("integer");

                    b.Property<string>("FrontBrake")
                        .HasColumnType("text");

                    b.Property<string>("FrontSuspension")
                        .HasColumnType("text");

                    b.Property<bool>("ReducedSpareWheel")
                        .HasColumnType("boolean");

                    b.Property<bool>("SpareWheel")
                        .HasColumnType("boolean");

                    b.Property<bool>("SportSuspension")
                        .HasColumnType("boolean");

                    b.Property<int?>("Transmission")
                        .HasColumnType("integer");

                    b.HasKey("ModificationId");

                    b.ToTable("Mobilities", "public");
                });

            modelBuilder.Entity("Domain.Entities.Model", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("Class")
                        .HasColumnType("integer");

                    b.Property<string>("CyrillicName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("MarkId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("YearFrom")
                        .HasColumnType("integer");

                    b.Property<int>("YearTo")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("MarkId");

                    b.ToTable("Models", "public");
                });

            modelBuilder.Entity("Domain.Entities.Modification", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("CarConfigurationId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("GroupName")
                        .HasColumnType("text");

                    b.Property<float?>("OffersPriceFrom")
                        .HasColumnType("real");

                    b.Property<float?>("OffersPriceTo")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("CarConfigurationId");

                    b.ToTable("Modifications", "public");
                });

            modelBuilder.Entity("Domain.Entities.Performance", b =>
                {
                    b.Property<string>("ModificationId")
                        .HasColumnType("text");

                    b.Property<decimal?>("ConsumptionCity")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("ConsumptionHiway")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("ConsumptionMixed")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("ElectricRange")
                        .HasColumnType("numeric");

                    b.Property<float?>("MaxSpeed")
                        .HasColumnType("real");

                    b.Property<decimal?>("RangeDistance")
                        .HasColumnType("numeric");

                    b.Property<float?>("TimeTo100")
                        .HasColumnType("real");

                    b.HasKey("ModificationId");

                    b.ToTable("Performances", "public");
                });

            modelBuilder.Entity("Domain.Entities.Safety", b =>
                {
                    b.Property<string>("ModificationId")
                        .HasColumnType("text");

                    b.Property<bool>("ABS")
                        .HasColumnType("boolean");

                    b.Property<bool>("ASR")
                        .HasColumnType("boolean");

                    b.Property<bool>("Alarm")
                        .HasColumnType("boolean");

                    b.Property<bool>("BAS")
                        .HasColumnType("boolean");

                    b.Property<bool>("BlindSpotMonitor")
                        .HasColumnType("boolean");

                    b.Property<bool>("CollisionPreventionAssist")
                        .HasColumnType("boolean");

                    b.Property<bool>("CurtainAirbags")
                        .HasColumnType("boolean");

                    b.Property<bool>("DownhillAssist")
                        .HasColumnType("boolean");

                    b.Property<bool>("DriverAirbag")
                        .HasColumnType("boolean");

                    b.Property<bool>("DrowsyDriverAlertSystem")
                        .HasColumnType("boolean");

                    b.Property<bool>("ESP")
                        .HasColumnType("boolean");

                    b.Property<bool>("FeedbackAlarm")
                        .HasColumnType("boolean");

                    b.Property<bool>("FrontISOFIX")
                        .HasColumnType("boolean");

                    b.Property<bool>("GLONASS")
                        .HasColumnType("boolean");

                    b.Property<bool>("HillControl")
                        .HasColumnType("boolean");

                    b.Property<bool>("ISOFIX")
                        .HasColumnType("boolean");

                    b.Property<bool>("Immobiliser")
                        .HasColumnType("boolean");

                    b.Property<bool>("KneeAirbag")
                        .HasColumnType("boolean");

                    b.Property<bool>("LaminatedSafetyGlass")
                        .HasColumnType("boolean");

                    b.Property<bool>("LaneKeepingAssist")
                        .HasColumnType("boolean");

                    b.Property<bool>("Lock")
                        .HasColumnType("boolean");

                    b.Property<bool>("NightVision")
                        .HasColumnType("boolean");

                    b.Property<bool>("PassengerAirbag")
                        .HasColumnType("boolean");

                    b.Property<bool>("RearDoorPowerChildLocks")
                        .HasColumnType("boolean");

                    b.Property<bool>("RearSideAirbag")
                        .HasColumnType("boolean");

                    b.Property<int?>("SafetyGrade")
                        .HasColumnType("integer");

                    b.Property<string>("SafetyRating")
                        .HasColumnType("text");

                    b.Property<bool>("SideAirbag")
                        .HasColumnType("boolean");

                    b.Property<bool>("TrafficSignRecognition")
                        .HasColumnType("boolean");

                    b.Property<bool>("TyrePressureMonitoring")
                        .HasColumnType("boolean");

                    b.Property<bool>("VSM")
                        .HasColumnType("boolean");

                    b.Property<bool>("VolumeSensor")
                        .HasColumnType("boolean");

                    b.HasKey("ModificationId");

                    b.ToTable("Safeties", "public");
                });

            modelBuilder.Entity("Domain.Entities.Weight", b =>
                {
                    b.Property<string>("ModificationId")
                        .HasColumnType("text");

                    b.Property<int?>("BaseWeight")
                        .HasColumnType("integer");

                    b.Property<float?>("BatteryCapacity")
                        .HasColumnType("real");

                    b.Property<int?>("FuelTankCapacity")
                        .HasColumnType("integer");

                    b.Property<int?>("FullWeight")
                        .HasColumnType("integer");

                    b.HasKey("ModificationId");

                    b.ToTable("Weights", "public");
                });

            modelBuilder.Entity("Domain.Entities.CarConfiguration", b =>
                {
                    b.HasOne("Domain.Entities.Generation", "Generation")
                        .WithMany("CarConfigurations")
                        .HasForeignKey("GenerationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Generation");
                });

            modelBuilder.Entity("Domain.Entities.Comfort", b =>
                {
                    b.HasOne("Domain.Entities.Modification", "Modification")
                        .WithOne("Comfort")
                        .HasForeignKey("Domain.Entities.Comfort", "ModificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Modification");
                });

            modelBuilder.Entity("Domain.Entities.Dimension", b =>
                {
                    b.HasOne("Domain.Entities.Modification", "Modification")
                        .WithOne("Dimension")
                        .HasForeignKey("Domain.Entities.Dimension", "ModificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Modification");
                });

            modelBuilder.Entity("Domain.Entities.Emissions", b =>
                {
                    b.HasOne("Domain.Entities.Modification", "Modification")
                        .WithOne("Emissions")
                        .HasForeignKey("Domain.Entities.Emissions", "ModificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Modification");
                });

            modelBuilder.Entity("Domain.Entities.Engine", b =>
                {
                    b.HasOne("Domain.Entities.Modification", "Modification")
                        .WithOne("Engine")
                        .HasForeignKey("Domain.Entities.Engine", "ModificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Modification");
                });

            modelBuilder.Entity("Domain.Entities.Exterior", b =>
                {
                    b.HasOne("Domain.Entities.Modification", "Modification")
                        .WithOne("Exterior")
                        .HasForeignKey("Domain.Entities.Exterior", "ModificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Modification");
                });

            modelBuilder.Entity("Domain.Entities.Generation", b =>
                {
                    b.HasOne("Domain.Entities.Model", "Model")
                        .WithMany("Generation")
                        .HasForeignKey("ModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Model");
                });

            modelBuilder.Entity("Domain.Entities.Interior", b =>
                {
                    b.HasOne("Domain.Entities.Modification", "Modification")
                        .WithOne("Interior")
                        .HasForeignKey("Domain.Entities.Interior", "ModificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Modification");
                });

            modelBuilder.Entity("Domain.Entities.Mobility", b =>
                {
                    b.HasOne("Domain.Entities.Modification", "Modification")
                        .WithOne("Mobility")
                        .HasForeignKey("Domain.Entities.Mobility", "ModificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Modification");
                });

            modelBuilder.Entity("Domain.Entities.Model", b =>
                {
                    b.HasOne("Domain.Entities.Mark", "Mark")
                        .WithMany("Models")
                        .HasForeignKey("MarkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Mark");
                });

            modelBuilder.Entity("Domain.Entities.Modification", b =>
                {
                    b.HasOne("Domain.Entities.CarConfiguration", "CarConfiguration")
                        .WithMany("Modifications")
                        .HasForeignKey("CarConfigurationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CarConfiguration");
                });

            modelBuilder.Entity("Domain.Entities.Performance", b =>
                {
                    b.HasOne("Domain.Entities.Modification", "Modification")
                        .WithOne("Performance")
                        .HasForeignKey("Domain.Entities.Performance", "ModificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Modification");
                });

            modelBuilder.Entity("Domain.Entities.Safety", b =>
                {
                    b.HasOne("Domain.Entities.Modification", "Modification")
                        .WithOne("Safety")
                        .HasForeignKey("Domain.Entities.Safety", "ModificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Modification");
                });

            modelBuilder.Entity("Domain.Entities.Weight", b =>
                {
                    b.HasOne("Domain.Entities.Modification", "Modification")
                        .WithOne("Weight")
                        .HasForeignKey("Domain.Entities.Weight", "ModificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Modification");
                });

            modelBuilder.Entity("Domain.Entities.CarConfiguration", b =>
                {
                    b.Navigation("Modifications");
                });

            modelBuilder.Entity("Domain.Entities.Generation", b =>
                {
                    b.Navigation("CarConfigurations");
                });

            modelBuilder.Entity("Domain.Entities.Mark", b =>
                {
                    b.Navigation("Models");
                });

            modelBuilder.Entity("Domain.Entities.Model", b =>
                {
                    b.Navigation("Generation");
                });

            modelBuilder.Entity("Domain.Entities.Modification", b =>
                {
                    b.Navigation("Comfort")
                        .IsRequired();

                    b.Navigation("Dimension")
                        .IsRequired();

                    b.Navigation("Emissions")
                        .IsRequired();

                    b.Navigation("Engine")
                        .IsRequired();

                    b.Navigation("Exterior")
                        .IsRequired();

                    b.Navigation("Interior")
                        .IsRequired();

                    b.Navigation("Mobility")
                        .IsRequired();

                    b.Navigation("Performance")
                        .IsRequired();

                    b.Navigation("Safety")
                        .IsRequired();

                    b.Navigation("Weight")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
